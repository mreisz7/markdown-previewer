{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["marked","setOptions","breaks","defaultText","renderer","Renderer","link","href","_","text","concat","App","_React$Component","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","rawMarkdown","handleMarkdownChange","bind","assertThisInitialized","inherits","createClass","key","value","event","setState","target","react_default","a","createElement","_this2","id","onChange","e","dangerouslySetInnerHTML","__html","Fragment","renderHeader","renderEditor","renderPreview","renderFooter","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAQAA,IAAOC,WAAW,CAChBC,QAAQ,IAGV,IAAMC,EAAmB,ivBA2CnBC,EAAW,IAAIJ,IAAOK,SAC5BD,EAASE,KAAO,SAASC,EAAMC,EAAGC,GAChC,kCAAAC,OAAmCH,EAAnC,MAAAG,OAA4CD,EAA5C,SAGK,IAAME,EAAb,SAAAC,GACE,SAAAD,EAAYE,GAAW,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAN,IACrBG,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAJ,GAAAS,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,YAAanB,GAEfW,EAAKS,qBAAuBT,EAAKS,qBAAqBC,KAA1BT,OAAAU,EAAA,EAAAV,CAAAD,IALPA,EADzB,OAAAC,OAAAW,EAAA,EAAAX,CAAAJ,EAAAC,GAAAG,OAAAY,EAAA,EAAAZ,CAAAJ,EAAA,EAAAiB,IAAA,uBAAAC,MAAA,SASuBC,GACnBb,KAAKc,SAAS,CACZT,YAAaQ,EAAME,OAAOH,UAXhC,CAAAD,IAAA,eAAAC,MAAA,WAgBI,OACEI,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,mCAlBR,CAAAP,IAAA,eAAAC,MAAA,WAwBI,OACEI,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAAA,yCA1BR,CAAAP,IAAA,eAAAC,MAAA,WA+BiB,IAAAO,EAAAnB,KACb,OACEgB,EAAAC,EAAAC,cAAA,YACEE,GAAG,SACHR,MAAOZ,KAAKI,MAAMC,YAClBgB,SAAU,SAACC,GAAD,OAAOH,EAAKb,qBAAqBgB,QApCnD,CAAAX,IAAA,gBAAAC,MAAA,WA0CI,OACEI,EAAAC,EAAAC,cAAA,OAAKE,GAAG,UAAUG,wBAAyB,CAACC,OAAQzC,IAAOiB,KAAKI,MAAMC,YAAa,CAAElB,kBA3C3F,CAAAwB,IAAA,SAAAC,MAAA,WAgDI,OACEI,EAAAC,EAAAC,cAAAF,EAAAC,EAAAQ,SAAA,KACGzB,KAAK0B,eACNV,EAAAC,EAAAC,cAAA,OAAKE,GAAG,gBACLpB,KAAK2B,eACL3B,KAAK4B,iBAEP5B,KAAK6B,oBAvDdnC,EAAA,CAAyBoC,IAAMC,WChDXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOtB,EAAAC,EAAAC,cAACqB,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.31a35927.chunk.js","sourcesContent":["import React, { ChangeEvent } from 'react';\nimport './scss/App.scss';\nimport marked from 'marked';\n\ninterface AppState {\n  rawMarkdown: string;\n}\n\nmarked.setOptions({\n  breaks: true,\n});\n\nconst defaultText: string = `# An H1 element (#)\n\n## An H2 element (##)\n  \n**Inline Code**: \\`this.setState({});\\` (between backticks)\n\n**Multiline Code**:\n\n\\`\\`\\`\nrender() {\n  return (\n    <div>Something to Render</div>\n  )\n}\n\\`\\`\\`\n\n**Bold Text**: **Surround with Asterisks**\n\n**Italic Text**: _Surround with Underscores_ \n\n**Strikethrough**: ~~Surround with Tildes~~ \n\n**Links**: [links](https://www.freecodecamp.com)\n\n**Block Quotes**:\n> Here is some text that will be displayed in a block quote.\n\n**Bulleted Lists**:\n- Item #1\n- Item #2\n- Item #3\n\n\n**Numbered Lists**:\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n\n\n**Images**:\n![Michael Reisz](https://www.mreisz.com/static/img/profile.jpg)\n`;\n\nconst renderer = new marked.Renderer();\nrenderer.link = function(href, _, text) {\n  return `<a target=\"_blank\" href=\"${href}\">${text}</a>`;\n};\n\nexport class App extends React.Component<{}, AppState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {\n      rawMarkdown: defaultText,\n    }\n    this.handleMarkdownChange = this.handleMarkdownChange.bind(this);\n  }\n\n  handleMarkdownChange(event: ChangeEvent<HTMLTextAreaElement>) {\n    this.setState({\n      rawMarkdown: event.target.value,\n    });\n  }\n\n  renderHeader() {\n    return (\n      <header>\n        <h1>Markdown Previewer</h1>\n      </header>\n    );\n  }\n\n  renderFooter() {\n    return (\n      <footer>\n        <span>&copy; 2019 - MReisz.com</span>\n      </footer>\n    );\n  }\n\n  renderEditor() {\n    return (\n      <textarea \n        id=\"editor\" \n        value={this.state.rawMarkdown} \n        onChange={(e) => this.handleMarkdownChange(e)}\n      />\n    );\n  }\n\n  renderPreview() {\n    return (\n      <div id=\"preview\" dangerouslySetInnerHTML={{__html: marked(this.state.rawMarkdown, { renderer })}} />\n    )\n  }\n\n  render() {\n    return (\n      <>\n        {this.renderHeader()}\n        <div id=\"preview-area\">\n          {this.renderEditor()}\n          {this.renderPreview()}\n        </div>\n        {this.renderFooter()}\n      </>\n    );\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './scss/index.scss';\nimport { App } from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}